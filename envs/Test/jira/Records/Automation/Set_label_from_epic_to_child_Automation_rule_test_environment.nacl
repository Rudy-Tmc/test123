jira.Automation Set_label_from_epic_to_child_Automation_rule_test_environment@sssssusss {
  name = "Set label from epic to child"
  state = "DISABLED"
  authorAccountId = {
    id = "557058:fbbb56de-c97c-4b68-8216-2e193b8dffdc"
    displayName = "Rudy Holtkamp"
  }
  actor = {
    type = "ACCOUNT_ID"
    value = {
      id = "557058:f58131cb-b67d-43c7-b30d-6b58d40bd077"
      displayName = "Automation for Jira"
    }
  }
  trigger = {
    component = "TRIGGER"
    schemaVersion = 1
    type = "jira.issue.event.trigger:updated"
    value = {
      eventKey = "jira:issue_updated"
      issueEvent = "issue_updated"
    }
    children = [
    ]
    conditions = [
    ]
  }
  components = [
    {
      component = "CONDITION"
      schemaVersion = 3
      type = "jira.issue.condition"
      value = {
        selectedField = {
          type = "ID"
          value = jira.Field.instance.Issue_Type__issuetype@suu
        }
        selectedFieldType = "issuetype"
        comparison = "ONE_OF"
        compareFieldValue = {
          type = "ID"
          multiValue = true
          values = [
            jira.IssueType.instance.Story,
          ]
        }
      }
      children = [
      ]
      conditions = [
      ]
    },
    {
      component = "ACTION"
      schemaVersion = 1
      type = "jira.create.variable"
      value = {
        id = "_customsmartvalue_id_1633504040176"
        name = {
          type = "FREE"
          value = "labelsset"
        }
        type = "SMART"
        query = {
          type = "SMART"
          value = "-"
        }
        lazy = false
      }
      children = [
      ]
      conditions = [
      ]
    },
    {
      component = "BRANCH"
      schemaVersion = 1
      type = "jira.issue.related"
      value = {
        relatedType = "epic"
        jql = ""
        linkTypes = [
        ]
        onlyUpdatedIssues = false
        similarityLimit = 40
        compareValue = 0
      }
      children = [
        {
          component = "CONDITION"
          schemaVersion = 1
          type = "jira.comparator.condition"
          value = {
            first = "{{issue.customfield_10013}}"
            second = ""
            operator = "NOT_EQUALS"
          }
          children = [
          ]
          conditions = [
          ]
        },
        {
          component = "ACTION"
          schemaVersion = 1
          type = "jira.create.variable"
          value = {
            id = "_customsmartvalue_id_1633504122559"
            name = {
              type = "FREE"
              value = "labelsset"
            }
            type = "SMART"
            query = {
              type = "SMART"
              value = "{{issue.labels}}"
            }
            lazy = false
          }
          children = [
          ]
          conditions = [
          ]
        },
      ]
      conditions = [
      ]
    },
    {
      component = "ACTION"
      schemaVersion = 1
      type = "codebarrel.action.log"
      children = [
      ]
      conditions = [
      ]
      rawValue = "Labels: {{labelsset}}"
    },
    {
      component = "CONDITION"
      schemaVersion = 1
      type = "jira.condition.container.block"
      children = [
        {
          component = "CONDITION_BLOCK"
          schemaVersion = 1
          type = "jira.condition.if.block"
          value = {
            conditionMatchType = "ALL"
          }
          children = [
            {
              component = "ACTION"
              schemaVersion = 10
              type = "jira.issue.edit"
              value = {
                operations = [
                  {
                    field = {
                      type = "ID"
                      value = jira.Field.instance.Labels__array
                    }
                    fieldType = "labels"
                    type = "ADDREMOVE"
                    value = {
                      ADD = [
                        {
                          type = "FREE"
                          value = "ea"
                        },
                      ]
                      REMOVE = [
                      ]
                    }
                  },
                ]
                sendNotifications = true
              }
              children = [
              ]
              conditions = [
              ]
            },
          ]
          conditions = [
            {
              component = "CONDITION"
              schemaVersion = 1
              type = "jira.comparator.condition"
              value = {
                first = "{{labelsset}}"
                second = "\\bea\\b"
                operator = "REGEX_CONTAINS"
              }
              children = [
              ]
              conditions = [
              ]
            },
          ]
        },
        {
          component = "CONDITION_BLOCK"
          schemaVersion = 1
          type = "jira.condition.if.block"
          value = {
            conditionMatchType = "ALL"
          }
          children = [
            {
              component = "ACTION"
              schemaVersion = 10
              type = "jira.issue.edit"
              value = {
                operations = [
                  {
                    field = {
                      type = "ID"
                      value = jira.Field.instance.Labels__array
                    }
                    fieldType = "labels"
                    type = "ADDREMOVE"
                    value = {
                      ADD = [
                        {
                          type = "FREE"
                          value = "pa"
                        },
                      ]
                      REMOVE = [
                      ]
                    }
                  },
                ]
                sendNotifications = true
              }
              children = [
              ]
              conditions = [
              ]
            },
          ]
          conditions = [
            {
              component = "CONDITION"
              schemaVersion = 1
              type = "jira.comparator.condition"
              value = {
                first = "{{labelsset}}"
                second = "\\bpa\\b"
                operator = "CONTAINS"
              }
              children = [
              ]
              conditions = [
              ]
            },
          ]
        },
      ]
      conditions = [
      ]
    },
  ]
  canOtherRuleTrigger = false
  notifyOnError = "FIRSTERROR"
  projects = [
    {
      projectId = jira.Project.instance.Automation_rule_test_environment@s
    },
  ]
  labels = [
  ]
  tags = [
    {
      tagType = "IS_RULE_UPDATED"
      tagValue = "true"
    },
  ]
  ruleHome = {
    
    ruleBillingHome = {
      locationARI = "ari:cloud:jira-software::site/a2ab9907-a2ed-48fe-9138-15c0301eaee1"
    }
    ruleLifecycleHome = {
      locationARI = "ari:cloud:jira:a2ab9907-a2ed-48fe-9138-15c0301eaee1:project/10012"
    }
  }
  writeAccessType = "UNRESTRICTED"
  collaborators = [
  ]
  billingType = "NORMAL"
  _alias = "Set label from epic to child"
}
